#creating global variables
import random
suits = ('Hearts','Diamonds','Clubs','Spades')
ranks=('Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','King','Queen','Ace','Jack')
values={'Two':2,'Three':3,'Four':4,'Five':5,'Six':6,'Seven':7,'Eight':8,'Nine':9,'Ten':10,'Jack':10,'King':10,'Queen':10,'Ace':11}
Playing=True


#Creating a card class
class Card():
    
    def __init__(self,suit,rank):
        self.suit=suit
        self.rank=rank
    
    def __str__(self):
        return self.rank + " of " + self.suit
        

#Creating a deck class
class Deck():
    
    def __init__(self):
        self.deck=[]
        for i in suits:
            for j in ranks:
                self.deck.append(Card(i,j))
                
    def __str__(self):
        deck_comp=''
        for card in self.deck:
            deck_comp+='\n'+ card.__str__()
        return "The deck has: " + deck_comp
            
    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        single_card = self.deck.pop()
        return single_card
        
        
#Creating a class for Hands
class Hand():
    def __init__(self):
        self.cards = []
        self.aces = 0
        self.value = 0
        
    def add_card(self,card):
        #card passed here is from the deck.deal() -->single_card(suit,rank)
        self.cards.append(card)
        self.value+=values[card.rank]
        
        #keeping track of aces
        if card.rank=='Ace':
            self.aces+=1
    
    def adjust_for_ace(self):
        #if total value is greater than 21 and there is still one ace
        #then ace value is changed from 11 to 1
        while (self.value>21 and self.aces):   
            #Another way of writing: self.aces>0; self.aces alone means TRUE if no.of aces>0 else FALSE
            self.value-=10
            self.aces-=1


#Creating Chips class
class Chips():
    def __init__(self):
        self.total=100
        self.bet=0
        
    def win_bet(self):
        self.total+=self.bet
        
    def lose_bet(self):
        self.total-=self.bet
        

#Function for betting
def take_bet(chips):
    while True:
        try:
            chips.bet=int(input("How many chips do you want to bet?"))
        except:
            print("Invalid input! Please type an integer")
        else:
            if(chips.bet>chips.total):
                print("You don't have enough chips. You have {}".format(chips.total))
            else:
                break
                
                
#Function for taking hits
def hit(deck,hand):
    single_card = deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace()
    
#Function prompting player to hit or stand
def hit_or_stand(deck,hand):
    global Playing   #to control an upcoming while loop
    
    while True:
        x=input("Hit or stand? Enter h or s")
        
        if(x[0].lower()=='h'):
            hit(deck,hand)
            
        elif(x[0].lower()=='s'):
            print("Player stands.Dealer's turn")
            Playing=False
            
        else:
            print("Sorry I did not understand your response.Please enter h or s only")
            continue
        break
        
        
#Functions to handle end of game scenarios
def player_busts(player,dealer,chips):
    print("Player busts!")
    chips.lose_bet()
    
def player_wins(player,dealer,chips):
    print("Player wins!")
    chips.win_bet()
    
def dealer_busts(player,dealer,chips):
    print("Player wins!Dealer busted!")
    chips.win_bet()
    
def dealer_wins(player,dealer,chips):
    print("Dealer wins!Player busted!")
    chips.lose_bet()
    
def push(player,dealer):
    print("Player and dealer tie!")
    
    
#function to show cards
def show_some(player,dealer):
    print("DEALER'S HAND:")
    print("one card hidden")
    print(dealer.cards[1])
    print("\n")
    print("PLAYER'S HAND:")
    for card in player.cards:
        print(card)
        
def show_all(player,dealer):
    print("DEALER'S HAND:")
    for card in dealer.cards:
        print(card)
    print("\n")
    print("PLAYER'S HAND")
    for card in player.cards:
        print(card)





#Actual gameplay script
while True:
#Opening statement
    print("WELCOME TO BLACKJACK")

    #Creating and shuffling the deck;dealing two cards to each player
    deck = Deck()
    deck.shuffle()

    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())

    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())

    #Setting up the player's chips

    player_chips=Chips()

    #Prompt the player for their bet
    take_bet(player_chips)

    #show cards
    show_some(player_hand,dealer_hand)

    while Playing:

        #prompt for player to hit or stand
        hit_or_stand(deck,player_hand)

        #show cards
        show_some(player_hand,dealer_hand)

        #if player_hand exceeds 21, run player_busts() and break out of loop
        if(player_hand.value>21):
            player_busts(player_hand,dealer_hand,player_chips)
            break

        #if the player hasn't busted,play dealer's hand until dealer reaches 17
    if player_hand.value<=21:
        while(dealer_hand.value<player_hand.value):
            hit(deck,dealer_hand)

        #show all cards
        show_all(player_hand,dealer_hand)

        #run different winning scenarios
        if(dealer_hand.value>21):
            dealer_busts(player_hand,dealer_hand,player_chips)
        elif(dealer_hand.value>player_hand.value):
            dealer_wins(player_hand,dealer_hand,player_chips)
        elif(player_hand.value>dealer_hand.value):
            player_wins(player_hand,dealer_hand,player_chips)
        else:
            push(player_hand,dealer_hand)

        #informing player of their chips
        print("\n The no.of chips left is: {}".format(player_chips.total))

        #Ask to play again
    new_game=input("Would you like to play again?Yes or No?")
    if (new_game[0].lower()=='y'):
        Playing=True
        continue
    else:
        print("Thank you for playing!")
        break
